classDiagram
    class App{
        <<module>>
        run()
        _compute_solutions_and_lte(params: SolverParams)
        _compute_gte(params: SolverParams, N0: int, N: int)
        _get_solver_params() SolverParams
    }

    class Config{
        <<module>>
        equation_latex: str
        solution_latex: str
        equation(x: float, y: float) float
        coefficient(x0: float, y0: float) float
        solution(x: float, c: float) float
    }
    
    class SolverError{
        <<exception>>
    }

    class Solver{
        <<abstract>>
        solve(equation, params: SolverParams)$ ndarray
    }

    class SolverModule{
        <<module>>
        solve_and_compute_lte(equation, exact_values: ndarray, params: SolverParams)$ ndarray
    }

    class EulerSolver{
        solve(equation, params: SolverParams)$ ndarray
    }

    class ImprovedEulerSolver{
        solve(equation, params: SolverParams)$ ndarray
    }

    class RungeKuttaSolver{
        solve(equation, params: SolverParams)$ ndarray
    }

    class ErrorFunctions{
        <<module>>
        absolute_error(exact_values: ndarray, approx_values: ndarray) ndarray
    }

    class SolverParams{
        <<dataclass>>
        initial_value: float
        x_from: float
        x_to: float
        number_of_points: float
        get_step_size() float
        get_space(skil_first: bool = false) ndarray
    }

    direction TB
    App -- Config
    App -- Solver
    App o-- SolverParams
    Solver <|-- EulerSolver
    Solver <|-- ImprovedEulerSolver
    Solver <|-- RungeKuttaSolver
    Solver -- SolverError
    Solver o-- SolverParams
    Solver -- ErrorFunctions
    SolverModule -- Solver
    
